<?php


namespace Aleahy\MailgunLogger\Test;

use BinaryCats\MailgunWebhooks\MailgunWebhooksServiceProvider;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Str;
use Orchestra\Testbench\TestCase as OrchestraTestCase;
use Aleahy\MailgunLogger\MailgunLoggerServiceProvider;
use CreateWebhookCallsTable;
class TestCase extends OrchestraTestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setUpDatabase();
    }

    protected function getPackageProviders($app)
    {
        return [
            MailgunLoggerServiceProvider::class
        ];
    }

    protected function getEnvironmentSetUp($app)
    {
        $app['config']->set('database.default', 'sqlite');
        $app['config']->set('database.connections.sqlite', [
            'driver' => 'sqlite',
            'database' => ':memory:',
            'prefix' => '',
        ]);
    }

    protected function setUpDatabase()
    {
        include_once __DIR__ . '/../vendor/spatie/laravel-webhook-client/database/migrations/create_webhook_calls_table.php.stub';
        (new CreateWebhookCallsTable())->up();
    }

    protected function defineRoutes($router)
    {
        Route::mailgunWebhooks('mglogger/webhooks');
    }

    protected function buildSignature($timestamp, $token, $secret):string
    {
        return hash_hmac('sha256',
            $timestamp . $token,
            $secret
        );
    }

    protected function createMailgunSignature(): array
    {
        $timestamp = now()->timestamp;

        $token = Str::random(50);

        return [
            'timestamp' => $timestamp,
            'token' => $token,
            'signature' => $this->buildSignature(
                $timestamp,
                $token,
                config('mailgun-logger.signing_secret')
            )
        ];
    }

    protected function getFileStub($filename)
    {
        return json_decode(file_get_contents(__DIR__.'/Stubs/' . $filename), true);
    }

}